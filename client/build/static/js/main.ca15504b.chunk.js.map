{"version":3,"sources":["components/AppNavbar.js","actions/itemAction.js","actions/types.js","components/SortButton.js","components/SearchComp.js","components/DownloadButton.js","components/AdvertisersList.js","components/DomainModal.js","components/Header.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","_this","setState","react_default","a","createElement","reactstrap_es","color","dark","expand","className","href","onClick","this","navbar","target","Component","getItems","dispatch","setItemsLoading","axios","get","then","res","type","payload","data","setWebsiteName","website","SortButton","isSortCount","isSortDomain","toggleSort","props","attributes","sortByType","sortTable","obj1","obj2","isSortUp","localeCompare","console","log","count","fa","size","connect","sortFunc","SearchComp","inputSearch","item","name","id","value","onChange","handleChange","placeholder","event","DownloadButton","downloadJSONFile","element","document","file","Blob","JSON","stringify","items","URL","createObjectURL","download","click","Loader","require","AdvertisersList","_this$props$item","loading","length","components_DownloadButton","striped","bordered","components_SearchComp","components_SortButton","map","_ref","domain","key","DomainModal","modal","e","Object","defineProperty","onSubmit","preventDefault","newSearch","for","post","Header","style","textAlignVertical","textAlign","initialState","itemsOrg","combineReducers","arguments","undefined","action","objectSpread","toConsumableArray","filter","includes","sort","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","devToolsExtension","f","App","es","components_AppNavbar","components_Header","components_DomainModal","components_AdvertisersList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca15504b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">Snaka</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink target=\"_blank\" href=\"http://mywebedenkeshet.epizy.com\">MyWebsite</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink target=\"_blank\" href=\"https://github.com/edenkes\">GitHub</NavLink>\r\n                                </NavItem>\r\n\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport {GET_ITEMS, NEW_SEARCH, ITEMS_LOADING, WEBSITE_NAME, HANDLE_CHANGE, SORT_TABLE} from '../actions/types';\r\nexport const getItems = () => dispatch => {\r\n    dispatch(setItemsLoading());\r\n    axios\r\n        .get('/api/items')\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_ITEMS,\r\n                payload: res.data\r\n            }))\r\n};\r\nexport const newSearch = website => dispatch => {\r\n    dispatch(setWebsiteName(website[\"domain\"]));\r\n    if (website[\"domain\"].length === 0)    return;\r\n\r\n    dispatch(setItemsLoading());\r\n\r\n    axios\r\n        .post('/api/items', website)\r\n        .then(res =>\r\n        dispatch({\r\n            type: NEW_SEARCH,\r\n            payload: res.data\r\n        }));\r\n\r\n    // return {\r\n    //     type: NEW_SEARCH,\r\n    //     payload: website\r\n    // }\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n};\r\n\r\nexport const setWebsiteName = (website) => {\r\n    return {\r\n        type: WEBSITE_NAME,\r\n        payload: website\r\n    }\r\n};\r\n\r\nexport const handleChange = (event) => dispatch => {\r\n    dispatch( {\r\n        type: HANDLE_CHANGE,\r\n        payload: event\r\n    })\r\n};\r\n\r\nexport const sortTable = (sortFunc) => dispatch => {\r\n    dispatch( {\r\n        type: SORT_TABLE,\r\n        payload: sortFunc\r\n    })\r\n};","export const GET_ITEMS      =   'GET_ITEMS';\r\nexport const NEW_SEARCH     =   'NEW_SEARCH';\r\nexport const ITEMS_LOADING  =   'ITEMS_LOADING';\r\nexport const WEBSITE_NAME   =   'WEBSITE_NAME';\r\nexport const HANDLE_CHANGE  =   'HANDLE_CHANGE';\r\nexport const SORT_TABLE     =   'SORT_TABLE';","import React, {Component} from 'react';\r\nimport {Container, Button } from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport { FaArrowDown, FaArrowUp} from 'react-icons/fa';\r\nimport PropTypes from \"prop-types\";\r\nimport {sortTable} from \"../actions/itemAction\";\r\n\r\nclass SortButton extends Component{\r\n    state = {\r\n        isSortCount: -1,\r\n        isSortDomain: 1,\r\n    };\r\n\r\n    toggleSort = () => {\r\n        if (this.props.attributes === \"domain\") {\r\n            this.setState({\r\n                isSortDomain: -1 * this.state.isSortDomain\r\n            });\r\n        }else if (this.props.attributes === \"count\") {\r\n            this.setState({\r\n                isSortCount: -1 * this.state.isSortCount\r\n            });\r\n        }\r\n    };\r\n\r\n    sortByType = () => {\r\n        this.toggleSort();\r\n        if (this.props.type === \"String\") {\r\n            this.props.sortTable((obj1, obj2) => {\r\n                // Descending: first domain name less than the count\r\n                return  this.isSortUp() * obj1[this.props.attributes].localeCompare(obj2[this.props.attributes])})\r\n        }else if (this.props.type === \"number\") {\r\n                this.props.sortTable((obj1, obj2) => {\r\n                    // Descending: first count less than the previous\r\n                    return this.isSortUp() * (obj1[this.props.attributes] - obj2[this.props.attributes])})\r\n        }else {\r\n            console.log(\"error - No such type\");\r\n            this.props.sortTable((obj1, obj2) => {\r\n                // Ascending: first count less than the previous\r\n                return this.isSortUp() * (obj1.count - obj2.count);\r\n            });\r\n        }\r\n    };\r\n\r\n    isSortUp = () => {\r\n        if (this.props.attributes === \"domain\")\r\n            return this.state.isSortDomain;\r\n        else if (this.props.attributes === \"count\")\r\n            return this.state.isSortCount;\r\n        else return 1\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Container >\r\n                <Button\r\n                    className=\"bg-transparent\"  onClick={this.sortByType}>\r\n                    {this.isSortUp() === -1 ? <FaArrowDown size={25}/> : <FaArrowUp  size={25}/>}\r\n                </Button>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nSortButton.propTypes = {\r\n    sortTable: PropTypes.func.isRequired,\r\n\r\n};\r\n\r\nconst mapStateToProps = () => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {sortTable})(SortButton);","import React, {Component} from 'react';\r\nimport {Container, Input} from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\nimport {handleChange} from \"../actions/itemAction\";\r\n\r\nclass SearchComp extends Component{\r\n    render() {\r\n        const  {inputSearch} = this.props.item;\r\n        return(\r\n            <Container >\r\n                <Input\r\n                    type=\"search\"\r\n                    name=\"inputSearch\"\r\n                    id=\"search1\"\r\n                    value={inputSearch}\r\n                    onChange = {this.props.handleChange}\r\n                    placeholder=\"search\"\r\n                />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nSearchComp.propTypes = {\r\n    handleChange: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {handleChange})(SearchComp);","import React, {Component} from 'react';\r\nimport {Container, Button } from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport {FaDownload} from 'react-icons/fa';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass DownloadButton extends Component{\r\n    downloadJSONFile = () => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([JSON.stringify(this.props.item.items)], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"resultAds.txt\";\r\n        element.click();\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Container >\r\n                <Button className=\"float-right p-1 bg-dark\" onClick={this.downloadJSONFile}>\r\n                    <FaDownload size={40}/>\r\n                </Button>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nDownloadButton.propTypes = {\r\n    item: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {})(DownloadButton);","import React, {Component} from 'react';\r\nimport SortButton from './SortButton'\r\nimport SearchComp from './SearchComp'\r\nimport DownloadButton from './DownloadButton'\r\nimport {Container, Table} from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport {getItems} from '../actions/itemAction'\r\nimport PropTypes from 'prop-types';\r\nconst Loader = require('react-loader');\r\n\r\nclass AdvertisersList extends Component{\r\n    componentDidMount(){\r\n        this.props.getItems();\r\n    }\r\n\r\n    render() {\r\n        const  {items, loading} = this.props.item;\r\n        return(\r\n            <Container >\r\n                {items && items.length > 0 ?\r\n                    <div>\r\n                        <DownloadButton />\r\n                    </div>\r\n                    : <div/>}\r\n\r\n                <Table striped bordered className=\"advertisers-list m-4\">\r\n                    <thead className=\"bg-info\">\r\n                    <tr>\r\n                        <th>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-3 col-xl-3\">DOMAIN</div>\r\n\r\n                                <div className=\"col-lg-7 col-xl-7 mr-1\">\r\n                                    <SearchComp />\r\n                                </div>\r\n\r\n                                {items && items.length > 0 ?\r\n                                    <div className=\"float-right\">\r\n                                        <SortButton attributes=\"domain\" type=\"String\"/>\r\n                                    </div>\r\n                                    : <div/>}\r\n                            </div>\r\n                        </th>\r\n                        <th>COUNT\r\n                            {items && items.length > 0 ?\r\n                                <div className=\"float-right\">\r\n                                    <SortButton attributes=\"count\" type=\"number\"/>\r\n                                </div>\r\n                                : <div/>}\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {items.map(({domain, count}) => (\r\n                        <tr key={domain}>\r\n                            <th>{domain}</th>\r\n                            <td>{count}</td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </Table>\r\n                {loading ? <Loader className=\"spinner\"/> : <div/>}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nAdvertisersList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {getItems})(AdvertisersList);","import React, {Component} from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {newSearch} from '../actions/itemAction';\r\n\r\nclass DomainModal extends Component{\r\n    state = {\r\n        modal:false,\r\n        name: ''\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const website = {\r\n            domain: this.state.name,\r\n        };\r\n\r\n        this.props.newSearch(website);\r\n\r\n        // Close model\r\n        this.toggle();\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button\r\n                    color=\"dark\"\r\n                    onClick={this.toggle}>\r\n                    Search new website\r\n                </Button>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Search Domain advertiser in website</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">\r\n                                    Search for new website\r\n                                </Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Website Name\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <br/>\r\n                                <ModalFooter className=\"pb-0\">\r\n                                    <Button color=\"primary\">Search</Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {newSearch})(DomainModal);","import React, {Component} from 'react';\r\nimport {Container} from 'reactstrap';\r\nimport {connect} from 'react-redux'\r\nimport {getItems} from '../actions/itemAction'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Header extends Component{\r\n    render() {\r\n        const  {website, items, loading} = this.props.item;\r\n        return(\r\n            <Container >\r\n                <h1 className=\"mb-4\">SNAKA - Script 'N' Analyze program for Ads </h1>\r\n                { !loading && website.length > 0 ?\r\n                    <div>\r\n                        {items.length > 0 ?\r\n                            <h3 style={{textAlignVertical: \"center\",textAlign: \"center\",}}>\r\n                                result for https://www.{website}/ads.txt\r\n                            </h3>\r\n                            :\r\n                            <h3 style={{textAlignVertical: \"center\",textAlign: \"center\", color:\"#8b0000\"}}>\r\n                                didn't find result for https://www.{website}/ads.txt\r\n                            </h3>}\r\n                    </div>\r\n                    :\r\n                    <div/>}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    item: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getItems})(Header);","import {GET_ITEMS, NEW_SEARCH, ITEMS_LOADING, WEBSITE_NAME, HANDLE_CHANGE, SORT_TABLE} from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    itemsOrg: [],\r\n    loading: false,\r\n    inputSearch: '',\r\n    website: ''\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: state.items,\r\n                loading: false,\r\n                inputSearch: state.inputSearch,\r\n                website: state.website\r\n            };\r\n        case NEW_SEARCH:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                itemsOrg: action.payload,\r\n                loading: false\r\n            };\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                items: [],\r\n                loading: true,\r\n            };\r\n        case WEBSITE_NAME:\r\n            return {\r\n                ...state,\r\n                website: action.payload,\r\n            };\r\n        case HANDLE_CHANGE:\r\n            state.items = state.itemsOrg;\r\n            state[action.payload.target.name] = action.payload.target.value;\r\n            return {\r\n                ...state,\r\n                items:  [...state.items].filter(item => item[\"domain\"].includes(state.inputSearch)),\r\n            };\r\n        case SORT_TABLE:\r\n            return {\r\n                ...state,\r\n                items:  [...state.items].sort(action.payload),\r\n                loading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n});\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState ={};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    // window.devToolsExtension && window.devToolsExtension(),\r\n    compose(applyMiddleware(...middleware),\r\n        window.devToolsExtension ? window.devToolsExtension() : f => f\r\n    )\r\n\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport AdvertisersList from './components/AdvertisersList';\nimport DomainModal from './components/DomainModal'\nimport Header from './components/Header'\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport {Container} from 'reactstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <div className=\"App\">\n                    <AppNavbar/>\n                    <Container>\n                        <Header />\n                        <DomainModal />\n                        <AdvertisersList/>\n                    </Container>\n                </div>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}